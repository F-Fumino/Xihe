#version 460

#define MAX_POINT_LIGHT_COUNT 256

#define MAX_PER_LIGHT_MESHLET_INSTANCES 45000

#extension GL_EXT_mesh_shader : require
#extension GL_KHR_shader_subgroup_ballot : require

layout(local_size_x = 32, local_size_y = 1, local_size_z = 1) in;
layout(triangles, max_vertices = 64, max_primitives = 124) out;

struct TaskData {
    uint meshlet_indices[32];
    uint light_index_face_index;
};

taskPayloadSharedEXT TaskData taskData;

#include "mesh_shading/mesh.h"


layout (set = 0, binding = 3) readonly buffer MeshDrawBuffer
{
    MeshDraw mesh_draws[];
};

layout(set = 0, binding = 4) readonly buffer MeshInstanceDrawBuffer
{
    MeshInstanceDraw instances[];
};


struct Vertex
{
	vec4 position;
	vec4 normal;
};

layout (set = 0, binding = 7) readonly buffer MeshletBuffer
{
  Meshlet meshlets[];
};

layout (set = 0, binding = 8) readonly buffer VerticesBuffer
{
  Vertex vertices[];
} vb;

layout (set = 0, binding = 9) readonly buffer MeshletVertices
{
    uint meshlet_vertices[]; // All per-meshlet vertex indices
} mvb;

layout (set = 0, binding = 10) readonly buffer MeshletTriangles
{
    uint meshlet_triangles[];  // All packed per-meshlet triangles
} mtb;


// Array containing all meshlets plain
// x = mesh_instance_index, y = meshlet_index
layout(set = 0, binding = 20) readonly buffer MeshletInstancesBuffer
{
	uvec2 meshlet_instances[];
};

// // Array of per light meshlet (offset + count)
// layout(set =0, binding = 21) buffer PerLightMeshletIndicesBuffer
// {
// 	uint per_light_meshlet_indices[];
// };

layout(set = 0, binding = 22) readonly buffer MeshletDrawCommands
{
    uvec4 meshlet_draw_commands[]; //
};

layout(set = 0, binding = 23) readonly buffer ShadowCameraSpheres 
{
    vec4 camera_spheres[];
};

layout (set = 0, binding = 24 ) readonly buffer ShadowViews {

    mat4    view_projections[];
};

void main()
{
    const uint light_index = taskData.light_index_face_index >> 16;
    const uint face_index = taskData.light_index_face_index & 0xF;
    const int layer_index = int(6 * light_index + face_index);

    uint task_index = gl_LocalInvocationID.x;
    uint meshlet_index = taskData.meshlet_indices[gl_WorkGroupID.x];

    const uint meshlet_index_read_offset = light_index * MAX_PER_LIGHT_MESHLET_INSTANCES;
    uint global_meshlet_index = meshlet_instances[meshlet_index + meshlet_index_read_offset].y;
    uint mesh_instance_index = meshlet_instances[meshlet_index + meshlet_index_read_offset].x;

    MeshDraw mesh_draw = mesh_draws[meshlets[global_meshlet_index].mesh_draw_index];

    uint vertex_count = meshlets[global_meshlet_index].vertex_count;
    uint triangle_count = meshlets[global_meshlet_index].triangle_count;

    SetMeshOutputsEXT(vertex_count, triangle_count);

    mat4 model = instances[mesh_instance_index].model;

    for(uint i = 0; i < vertex_count; ++i)
    {
        uint global_vertex_index = mvb.meshlet_vertices[mesh_draw.mesh_vertex_offset + meshlets[global_meshlet_index].vertex_offset + i];

        vec4 pos = model * vec4(vb.vertices[global_vertex_index].position.xyz, 1.0);

        gl_MeshVerticesEXT[i].gl_Position = view_projections[layer_index] * pos;
    }

    for(uint i = 0; i < triangle_count; ++i)
    {
        uint packed_triangle = mtb.meshlet_triangles[mesh_draw.mesh_triangle_offset + meshlets[global_meshlet_index].triangle_offset + i];
        uint idx0 = (packed_triangle >> 0) & 0xFFu;
        uint idx1 = (packed_triangle >> 8) & 0xFFu;
        uint idx2 = (packed_triangle >> 16) & 0xFFu;

        gl_PrimitiveTriangleIndicesEXT[i] = uvec3(idx0, idx1, idx2);
    }

    uint index_processing_iterations = (triangle_count + gl_WorkGroupSize.x - 1) / gl_WorkGroupSize.x;

    for(int i = 0; i < index_processing_iterations; i++) {
		if(gl_LocalInvocationIndex * index_processing_iterations + i >= triangle_count) {
			break;
		}

		gl_MeshPrimitivesEXT[gl_LocalInvocationIndex * index_processing_iterations + i].gl_Layer = layer_index;

	}

}