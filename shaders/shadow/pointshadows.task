#version 460

#define MAX_POINT_LIGHT_COUNT 256

#define MAX_PER_LIGHT_MESHLET_INSTANCES 45000

#extension GL_EXT_mesh_shader : require
#extension GL_KHR_shader_subgroup_ballot : require

layout(local_size_x = 32, local_size_y = 1, local_size_z = 1) in;

struct TaskData {
    uint meshlet_indices[32];
    uint light_index_face_index;
};

taskPayloadSharedEXT TaskData taskData;

#include "mesh_shading/mesh.h"

layout (set = 0, binding = 3) readonly buffer MeshDrawBuffer
{
    MeshDraw mesh_draws[];
};

layout(set = 0, binding = 4) readonly buffer MeshInstanceDrawBuffer
{
    MeshInstanceDraw instances[];
};


layout(set = 0, binding = 7) readonly buffer MeshletBuffer
{
	Meshlet meshlets[];
};

// Array containing all meshlets plain
// x = mesh_instance_index, y = meshlet_index
layout(set = 0, binding = 20) readonly buffer MeshletInstancesBuffer
{
	uvec2 meshlet_instances[];
};

 // Array of per light meshlet (offset + count)
 layout(set =0, binding = 21) readonly buffer PerLightMeshletIndicesBuffer
 {
 	uint per_light_meshlet_indices[];
 };

layout(set = 0, binding = 22) readonly buffer MeshletDrawCommands
{
    uvec4 meshlet_draw_commands[]; //
};

layout(set = 0, binding = 23) readonly buffer ShadowCameraSpheres 
{
    vec4 camera_spheres[];
};


uint get_cube_face_mask( vec3 cube_map_pos, vec3 aabb_min, vec3 aabb_max ) {

    vec3 plane_normals[] = { vec3(-1, 1, 0), vec3(1, 1, 0), vec3(1, 0, 1), vec3(1, 0, -1), vec3(0, 1, 1), vec3(0, -1, 1) };
    vec3 abs_plane_normals[] = { vec3(1, 1, 0), vec3(1, 1, 0), vec3(1, 0, 1), vec3(1, 0, 1), vec3(0, 1, 1), vec3(0, 1, 1) };

    vec3 aabb_center = (aabb_min + aabb_max) * 0.5f;

    vec3 center = aabb_center - cube_map_pos;
    vec3 extents = (aabb_max - aabb_min) * 0.5f;

    bool rp[ 6 ];
    bool rn[ 6 ];

    for ( uint  i = 0; i < 6; ++i ) {
        float dist = dot( center, plane_normals[ i ] );
        float radius = dot( extents, abs_plane_normals[ i ] );

        rp[ i ] = dist > -radius;
        rn[ i ] = dist < radius;
    }

    uint fpx = (rn[ 0 ] && rp[ 1 ] && rp[ 2 ] && rp[ 3 ] && aabb_max.x > cube_map_pos.x) ? 1 : 0;
    uint fnx = (rp[ 0 ] && rn[ 1 ] && rn[ 2 ] && rn[ 3 ] && aabb_min.x < cube_map_pos.x) ? 1 : 0;
    uint fpy = (rp[ 0 ] && rp[ 1 ] && rp[ 4 ] && rn[ 5 ] && aabb_max.y > cube_map_pos.y) ? 1 : 0;
    uint fny = (rn[ 0 ] && rn[ 1 ] && rn[ 4 ] && rp[ 5 ] && aabb_min.y < cube_map_pos.y) ? 1 : 0;
    uint fpz = (rp[ 2 ] && rn[ 3 ] && rp[ 4 ] && rp[ 5 ] && aabb_max.z > cube_map_pos.z) ? 1 : 0;
    uint fnz = (rn[ 2 ] && rp[ 3 ] && rn[ 4 ] && rn[ 5 ] && aabb_min.z < cube_map_pos.z) ? 1 : 0;

    return fpx | ( fnx << 1 ) | ( fpy << 2 ) | ( fny << 3 ) | ( fpz << 4 ) | ( fnz << 5 );
}

bool cone_cull(vec3 center, float radius, vec3 cone_axis, float cone_cutoff, vec3 camera_position)
{
    return dot(center - camera_position, cone_axis) >= cone_cutoff * length(center - camera_position) + radius;
}

bool sphere_intersect( vec3 center_a, float radius_a, vec3 center_b, float radius_b ) {
	const vec3 v = center_b - center_a;
	const float total_radius = radius_a + radius_b;

	return dot(v, v) <= total_radius*total_radius;
}

void main()
{
    uint task_index = gl_LocalInvocationID.x;
    uint meshlet_group_index = gl_WorkGroupID.x;
    uint meshlet_index = meshlet_group_index * 32 + task_index;

    uint packed_light_index_face_index = meshlet_draw_commands[gl_DrawID].w;

    const uint light_index = packed_light_index_face_index >> 16;

    if(meshlet_index >= per_light_meshlet_indices[light_index])
	{
		return;
	}

//    uvec4 ballotxx = subgroupBallot(true);
//    uint indexxx = subgroupBallotExclusiveBitCount(ballotxx);
//
//    taskData.meshlet_indices[indexxx] = 0;
//    taskData.light_index_face_index = 0;
//    taskData.mesh_instance_index = 0;
//
//    uint countxx = subgroupBallotBitCount(ballotxx);
//    if (gl_LocalInvocationID.x == 0 && countxx > 0) {
//        EmitMeshTasksEXT(countxx, 1, 1);
//    }
//    return;

    const uint meshlet_index_read_offset = light_index * MAX_PER_LIGHT_MESHLET_INSTANCES;

    uint global_meshlet_index = meshlet_instances[meshlet_index + meshlet_index_read_offset].y;
    uint mesh_instance_index = meshlet_instances[meshlet_index + meshlet_index_read_offset].x;

    const uint face_index = packed_light_index_face_index & 0xF;

    mat4 model = instances[mesh_instance_index].model;

    vec4 world_center = model * vec4(meshlets[global_meshlet_index].center, 1.0);
    float scale = length(model[0]);
    float radius = meshlets[global_meshlet_index].radius * scale;

    vec3 cone_axis = mat3(model) * meshlets[global_meshlet_index].cone_axis;
    float cone_cutoff = meshlets[global_meshlet_index].cone_cutoff;

    const vec4 camera_sphere = camera_spheres[light_index];

    bool accept = !cone_cull(world_center.xyz, radius, cone_axis, cone_cutoff, camera_sphere.xyz);

    if(accept)
    {
        accept = sphere_intersect(world_center.xyz, radius, camera_sphere.xyz, camera_sphere.w);
    }

    if(accept)
    {
        uint visible_faces = get_cube_face_mask(camera_sphere.xyz, world_center.xyz - vec3(radius), world_center.xyz + vec3(radius));

        switch (face_index) {
            case 0:
                accept = (visible_faces & 1) != 0;
                break;
            case 1:
                accept = (visible_faces & 2) != 0;
                break;
            case 2:
                accept = (visible_faces & 4) != 0;
                break;
            case 3:
                accept = (visible_faces & 8) != 0;
                break;
            case 4:
                accept = (visible_faces & 16) != 0;
                break;
            case 5:
                accept = (visible_faces & 32) != 0;
                break;
        }
    }

    uvec4 ballot = subgroupBallot(accept);
    uint index = subgroupBallotExclusiveBitCount(ballot);

    if (accept)
        taskData.meshlet_indices[index] = meshlet_index;
    taskData.light_index_face_index = packed_light_index_face_index;

    uint count = subgroupBallotBitCount(ballot);
    if (gl_LocalInvocationID.x == 0 && count > 0) {
        EmitMeshTasksEXT(count, 1, 1);
    }
}