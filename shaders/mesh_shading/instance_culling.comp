#version 450
#extension GL_EXT_debug_printf : require

#define MESHLETS_PER_TASK 32

layout(set = 0, binding = 1) uniform GlobalUniform {
    mat4 view;
    mat4 view_proj;
    vec4 frustum_planes[6]; // Frustum planes in view space
    vec3 camera_position;
} global_uniform;

#include "mesh_shading/mesh.h"

layout(std430, binding = 2) readonly buffer MeshDrawBuffer
{
    MeshDraw mesh_draws[];
};

layout(std430, binding = 3) readonly buffer MeshInstanceDrawBuffer
{
    MeshInstanceDraw instances[];
};

layout(std430, binding = 4) buffer MeshDrawCommandBuffer
{
    MeshDrawCommand commands[];
};

layout(std430, binding = 5) buffer CounterBuffer {
    uint draw_count;
};

layout(std430, binding = 6) readonly buffer MeshBounds
{
	vec4 mesh_bounds[];
};

layout(std430, binding = 7) buffer InstanceVisibilityBuffer
{
    uint instance_visibility[];
};

layout (local_size_x = 256, local_size_y = 1, local_size_z = 1) in;

bool frustumCull(vec3 center_view_space, float radius) {
    for (int i = 0; i < 6; ++i) {
        if (dot(global_uniform.frustum_planes[i], vec4(center_view_space, 1.0)) < -radius) {
            return false;
        }
    }
    return true;
}

void main()
{
    if (gl_GlobalInvocationID.x == 0) {
        draw_count = 0;
    }

    memoryBarrierBuffer();
    barrier(); // TODO

    uint instance_index = gl_GlobalInvocationID.x;
    if (instance_index >= instances.length())
        return;

    MeshInstanceDraw instance = instances[instance_index];
    MeshDraw mesh_draw = mesh_draws[instance.mesh_draw_index];
    
    // todo: do instance culling here
    mat4 model = instance.model;
	float scale = length(model[0]);

    vec4 bounding_sphere = mesh_bounds[instance.mesh_draw_index];
	vec4 world_center = model * vec4(bounding_sphere.xyz, 1.0);
	float radius = bounding_sphere.w * scale * 1.1;
    vec3 center_view_space = (global_uniform.view * world_center).xyz;

    bool frustum_visible = frustumCull(center_view_space, radius);

    bool is_visible = frustum_visible;

    instance_visibility[instance_index] = is_visible ? 1 : 0;
}