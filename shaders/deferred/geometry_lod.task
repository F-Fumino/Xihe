#version 460
#extension GL_EXT_mesh_shader : require
#extension GL_KHR_shader_subgroup_ballot : require
#extension GL_ARB_shader_draw_parameters : require
#extension GL_EXT_debug_printf : require
#extension GL_EXT_shader_explicit_arithmetic_types : require

layout(local_size_x = 32, local_size_y = 1, local_size_z = 1) in;

layout(set = 0, binding = 2) uniform GlobalUniform {
    mat4 view;
    mat4 view_proj;
    vec4 frustum_planes[6]; // Frustum planes in view space
    vec3 camera_position;
} global_uniform;

#include "mesh_shading/mesh.h"

layout (std430, binding = 3) readonly buffer MeshDrawBuffer
{
    MeshLoDDraw mesh_draws[];
};

layout(std430, binding = 4) readonly buffer MeshInstanceDrawBuffer
{
    MeshInstanceDraw instances[];
};

layout(std430, binding = 5) readonly buffer MeshDrawCommandBuffer
{
    MeshDrawCommand commands[];
};

layout(std430, binding = 7) buffer MeshletBuffer {
    Meshlet meshlets[];
};

layout(std430, binding = 10) buffer VertexPageStateBuffer {
    uint8_t vertex_page_state[];
    // uint vertex_page_state[];
};

layout(std430, binding = 11) buffer TrianglePageStateBuffer {
    uint8_t triangle_page_state[];
    // uint triangle_page_state[];
};

#define VERTEX_SIZE 32

layout (std430, binding = 12) buffer ValidDataSizeBuffer
{
  uint valid_data_size;
};

layout(push_constant) uniform LOD {
    float threshold;
} lod;

// Task output payload
struct TaskData {
    uint meshletIndices[32];
    uint instance_index;
};

taskPayloadSharedEXT TaskData taskData;

// Cone culling function
bool coneCull(vec3 center, float radius, vec3 cone_axis, float cone_cutoff, vec3 camera_position) {
    vec3 to_center = center - camera_position;
    float dist = length(to_center);
    return dot(to_center, cone_axis) >= cone_cutoff * dist + radius;
}

// Frustum culling function
bool frustumCull(vec3 center_view_space, float radius) {
    for (int i = 0; i < 6; ++i) {
        if (dot(global_uniform.frustum_planes[i], vec4(center_view_space, 1.0)) < -radius) {
            return false;
        }
    }
    return true;
}

// const float lod_error_threshold = 1.0f;
const float screen_height = 1080.0f;
const float test_fov = 3.14159265359f / 2.0f;
const float cot_half_fov = 1.0f / tan(test_fov / 2.0f);

vec4 transformSphere(vec4 sphere, mat4 transform) {
    vec4 h_center = vec4(sphere.xyz, 1.0f);
    h_center = transform * h_center;
    const vec3 center = h_center.xyz / h_center.w;
    if (isinf(sphere.w))
    {
        // debugPrintfEXT("%f", length((transform * vec4(sphere.w, 0, 0, 0)).xyz));
        return vec4(center, sphere.w);
    }
    return vec4(center, length((transform * vec4(sphere.w, 0, 0, 0)).xyz));
}

float projectErrorToScreen(vec4 transformed_sphere) {
    if (isinf(transformed_sphere.w)) {
        return transformed_sphere.w;
    }
    const float d2 = dot(transformed_sphere.xyz, transformed_sphere.xyz);
    const float r = transformed_sphere.w;
    if (d2 <= r * r) {
		debugPrintfEXT("d2 <= r * r %f %f", d2, r);
		return 1.0f / 0.0f; // return inf
	}
    return screen_height * cot_half_fov * r / sqrt(d2 - r * r);
}

bool lodCull(Meshlet meshlet, mat4 modelview) {
    vec4 projected_bounds = vec4(meshlet.center, max(meshlet.cluster_error, 10e-10f));
    projected_bounds = transformSphere(projected_bounds, modelview);

    vec4 parent_projected_bounds = vec4(meshlet.parent_bounding_sphere.xyz, max(meshlet.parent_error, 10e-10f));
    parent_projected_bounds = transformSphere(parent_projected_bounds, modelview);

    const float cluster_error = projectErrorToScreen(projected_bounds);
    const float parent_error = projectErrorToScreen(parent_projected_bounds);

    const bool render = cluster_error <= lod.threshold && parent_error > lod.threshold;
    
    if (render)
	{
        debugPrintfEXT("render LOD %d, cluster Error: %f, parent error: %f, lod threshold: %f", meshlet.lod, cluster_error, parent_error, lod.threshold);
	}
    else
    {
        debugPrintfEXT("not LOD %d, cluster Error: %f, parent error: %f, lod_threshold: %f", meshlet.lod, cluster_error, parent_error, lod.threshold);
    }
    return render;
}

void main()
{
    uint command_index = gl_DrawID;
    uint instance_index = commands[command_index].instance_index;
    MeshInstanceDraw instance = instances[instance_index];
    mat4 model = instance.model;

    debugPrintfEXT("instance index: %d", instance_index);

	uint ti = gl_LocalInvocationID.x;
    uint mgi = gl_WorkGroupID.x;

    uint base_meshlet_index = mesh_draws[instance.mesh_draw_index].meshlet_offset;

    uint mi = mgi * 32 + ti;

    if (mi >= mesh_draws[instance.mesh_draw_index].meshlet_count)
        return;

    Meshlet meshlet = meshlets[base_meshlet_index + mi];

    // Transform bounding sphere to world space
    vec4 world_center = model * vec4(meshlet.center, 1.0);
    float scale = length(model[0]); // Assuming uniform scaling
    float radius = meshlet.radius * scale * 1.1; // Slightly inflate the radius

    // Transform center to view space for frustum culling
    vec3 center_view_space = (global_uniform.view * world_center).xyz;

    // Perform frustum culling
    bool frustum_visible = frustumCull(center_view_space, radius);

    // Perform cone culling
    vec3 cone_axis_world = normalize(mat3(model) * meshlet.cone_axis);
    float cone_cutoff = meshlet.cone_cutoff;
    bool cone_cull_result = coneCull(world_center.xyz, radius, cone_axis_world, cone_cutoff, global_uniform.camera_position);

#ifdef USE_LOD
    bool lod_check = lodCull(meshlet, global_uniform.view * model);
#else
    bool lod_check = meshlet.lod == 1;
#endif

    // Determine if the meshlet should be rendered
    bool accept = frustum_visible && !cone_cull_result && lod_check;
    // bool accept = lod_check;

    if (accept) {

        // atomicOr(vertex_page_state[meshlet.vertex_page_index1], uint8_t(0x1u));
        // atomicOr(vertex_page_state[meshlet.vertex_page_index2], uint8_t(0x1u));
        // atomicOr(triangle_page_state[meshlet.triangle_page_index1], uint8_t(0x1u));
        // atomicOr(triangle_page_state[meshlet.triangle_page_index2], uint8_t(0x1u));
        
        vertex_page_state[meshlet.vertex_page_index1] |= uint8_t(0x1u);
        vertex_page_state[meshlet.vertex_page_index2] |= uint8_t(0x1u);
        triangle_page_state[meshlet.triangle_page_index1] |= uint8_t(0x1u);
        triangle_page_state[meshlet.triangle_page_index2] |= uint8_t(0x1u);

        atomicAdd(valid_data_size, meshlet.vertex_count * VERTEX_SIZE);
    }

    bool vertex_page1_loaded = (vertex_page_state[meshlet.vertex_page_index1] & 0x2u) != 0u;
    bool vertex_page2_loaded = (vertex_page_state[meshlet.vertex_page_index2] & 0x2u) != 0u;
    bool triangle_page1_loaded = (triangle_page_state[meshlet.triangle_page_index1] & 0x2u) != 0u;
    bool triangle_page2_loaded = (triangle_page_state[meshlet.triangle_page_index2] & 0x2u) != 0u;

    if (!vertex_page1_loaded || !vertex_page2_loaded || !triangle_page1_loaded || !triangle_page2_loaded) {
        accept = false;
    }

    if (!accept)
    {
        // debugPrintfEXT("Not accept");
    }

    // Use subgroup operations for efficiency
    uvec4 ballot = subgroupBallot(accept);
    uint index = subgroupBallotExclusiveBitCount(ballot);

    if (accept)
    {
        taskData.meshletIndices[index] = mi;
    }
    taskData.instance_index = instance_index;

    uint count = subgroupBallotBitCount(ballot);

    // Emit mesh tasks if any meshlets are visible
    if (gl_LocalInvocationID.x == 0 && count > 0) {
        EmitMeshTasksEXT(count, 1, 1);
    }
}