#version 460
#extension GL_EXT_mesh_shader : require
#extension GL_ARB_shader_draw_parameters : require
#extension GL_EXT_buffer_reference : require
#extension GL_EXT_shader_explicit_arithmetic_types : require
#extension GL_EXT_debug_printf : require

#define MAX_BUFFER_SIZE (1 * 1024 * 1024 * 1024)

struct TaskData {
    uint meshletIndices[32];
    uint instance_index;
};
taskPayloadSharedEXT TaskData taskData;

layout(local_size_x = 1, local_size_y = 1, local_size_z = 1) in;
layout(triangles, max_vertices = 64, max_primitives = 124) out;

layout(set = 0, binding = 2) uniform GlobalUniform {
    mat4 view;
    mat4 view_proj;
    vec4 frustum_planes[6]; // Frustum planes in view space
    vec3 camera_position;
} global_uniform;

#include "mesh_shading/mesh.h"

layout (std430, binding = 3) readonly buffer MeshDrawBuffer
{
    MeshDraw mesh_draws[];
};

layout(std430, binding = 4) readonly buffer MeshInstanceDrawBuffer
{
    MeshInstanceDraw instances[];
};

layout(std430, binding = 5) readonly buffer MeshDrawCommandBuffer
{
    MeshDrawCommand commands[];
};

//layout(std430, binding = 6) readonly buffer CounterBuffer {
//    uint draw_count;
//};

struct s_vertex
{
	vec4 position;
	vec4 normal;
};

#define VERTEX_SIZE 32

layout (std430, binding = 7) buffer MeshletBuffer
{
  Meshlet meshlets[];
};

layout (buffer_reference, std430) buffer _vertices
{
  s_vertex vertices[];
};

layout (std430, binding = 8) buffer VertexBufferAddressList
{
  _vertices vertex_buffer_addresses[];
};

//layout (std430, binding = 8) buffer _vertices
//{
//  s_vertex vertices[];
//} vb;

layout (std430, binding = 9) buffer _meshlet_vertices
{
    uint meshlet_vertices[]; // All per-meshlet vertex indices
} mvb;

layout (std430, binding = 10) buffer _meshlet_triangles
{
    uint meshlet_triangles[];  // All packed per-meshlet triangles
} mtb;

layout (location = 0) out PerVertexData
{
  vec4 pos;
  vec3 normal;
  vec2 uv;
  flat uint mesh_draw_index;
} v_out[];

uint getVertexBufferIndex(uint global_vertex_index)
{
    uint64_t offset = uint64_t(global_vertex_index) * VERTEX_SIZE;
    return uint(offset / MAX_BUFFER_SIZE);
}

uint getLocalVertexIndex(uint global_vertex_index)
{
	uint64_t offset = uint64_t(global_vertex_index) * VERTEX_SIZE;
	return uint(offset % MAX_BUFFER_SIZE) / VERTEX_SIZE;
}

void main(void)
{
    uint instance_index = taskData.instance_index;

    MeshInstanceDraw instance = instances[instance_index];
    mat4 model = instance.model;

    uint meshlet_offset = mesh_draws[instance.mesh_draw_index].meshlet_offset;
    uint mesh_vertex_offset = mesh_draws[instance.mesh_draw_index].mesh_vertex_offset;
    uint mesh_triangle_offset = mesh_draws[instance.mesh_draw_index].mesh_triangle_offset;
    
    uint meshlet_index = meshlet_offset + taskData.meshletIndices[gl_WorkGroupID.x];

    Meshlet meshlet = meshlets[meshlet_index];
    uint vertex_count = meshlet.vertex_count;
    uint triangle_count = meshlet.triangle_count;

    SetMeshOutputsEXT(vertex_count, triangle_count);

    mat4 MVP = global_uniform.view_proj * model;

    float min_value = 0.1;
    vec4 meshlet_color = vec4(
        max(float((meshlet_index * 37) % 255) / 255.0, min_value),
        max(float((meshlet_index * 73) % 255) / 255.0, min_value),
        max(float((meshlet_index * 151) % 255) / 255.0, min_value),
        1.0
    );


    for (uint i = 0; i < vertex_count; ++i)
    {
        uint global_vertex_index = mvb.meshlet_vertices[mesh_vertex_offset + meshlet.vertex_offset + i];
        uint vertex_buffer_index = getVertexBufferIndex(global_vertex_index);
        uint local_vertex_index = getLocalVertexIndex(global_vertex_index);

        _vertices vb = vertex_buffer_addresses[vertex_buffer_index];

        v_out[i].pos = model * vec4(vb.vertices[local_vertex_index].position.xyz, 1.0);

        debugPrintfEXT("v_out pos: (%f, %f, %f)\n", v_out[i].pos.x, v_out[i].pos.y, v_out[i].pos.z);

        gl_MeshVerticesEXT[i].gl_Position = global_uniform.view_proj * v_out[i].pos;

        v_out[i].normal = mat3(model) * vb.vertices[local_vertex_index].normal.xyz;

        v_out[i].uv = vec2(vb.vertices[local_vertex_index].position.w, vb.vertices[local_vertex_index].normal.w);

        v_out[i].mesh_draw_index = instance.mesh_draw_index;

#ifdef SHOW_MESHLET_VIEW
        v_out[i].pos = meshlet_color;
#endif
    }

    // Set each triangle's vertex indices using per-meshlet triangles
    for (uint i = 0; i < triangle_count; ++i)
    {
        uint packed_triangle = mtb.meshlet_triangles[mesh_triangle_offset + meshlet.triangle_offset + i];
        uint idx0 = (packed_triangle >> 0) & 0xFFu;
        uint idx1 = (packed_triangle >> 8) & 0xFFu;
        uint idx2 = (packed_triangle >> 16) & 0xFFu;

        gl_PrimitiveTriangleIndicesEXT[i] = uvec3(idx0, idx1, idx2);
    }
}
