#version 460
#extension GL_EXT_mesh_shader : require
#extension GL_ARB_shader_draw_parameters : require
#extension GL_EXT_buffer_reference : require
#extension GL_EXT_shader_explicit_arithmetic_types : require
#extension GL_EXT_debug_printf : require

#define MAX_BUFFER_SIZE (1 * 1024 * 1024 * 1024)
#define PAGE_SIZE (1 * 1024 * 1024)
#define MAX_BUFFER_PAGE (MAX_BUFFER_SIZE / PAGE_SIZE)
#define MAX_LOD 20.0

struct TaskData {
    uint clusterIndices[32];
    uint instance_index;
};
taskPayloadSharedEXT TaskData taskData;

layout(local_size_x = 1, local_size_y = 1, local_size_z = 1) in;
layout(triangles, max_vertices = 64, max_primitives = 124) out;

layout(set = 0, binding = 2) uniform GlobalUniform {
    mat4 view;
    mat4 view_proj;
    vec4 frustum_planes[6]; // Frustum planes in view space
    vec3 camera_position;
} global_uniform;

#include "mesh_shading/mesh.h"

layout (std430, binding = 3) readonly buffer MeshDrawBuffer
{
    MeshLoDDraw mesh_draws[];
};

layout(std430, binding = 4) readonly buffer MeshInstanceDrawBuffer
{
    MeshInstanceDraw instances[];
};

layout(std430, binding = 5) readonly buffer MeshDrawCommandBuffer
{
    MeshDrawCommand commands[];
};

//layout(std430, binding = 6) readonly buffer CounterBuffer {
//    uint draw_count;
//};

layout (buffer_reference, std430) buffer _scene_data
{
  uint scene_data[];
};

layout (std430, binding = 7) buffer SceneDataBufferAddressList
{
  _scene_data scene_data_buffer_addresses[];
};

layout(std430, binding = 8) buffer ClusterGroupBuffer {
    ClusterGroup cluster_groups[];
};

layout(std430, binding = 10) buffer ClusterBuffer {
    Cluster clusters[];
};

layout (location = 0) out PerVertexData
{
  vec4 pos;
  vec3 normal;
  vec2 uv;
  flat uint mesh_draw_index;
} v_out[];

void main(void)
{
    uint instance_index = taskData.instance_index;

    MeshInstanceDraw instance = instances[instance_index];
    mat4 model = instance.model;

    uint cluster_offset = mesh_draws[instance.mesh_draw_index].cluster_offset;
    uint cluster_index  = cluster_offset + taskData.clusterIndices[gl_WorkGroupID.x];

    Cluster cluster = clusters[cluster_index];
    ClusterGroup cluster_group = cluster_groups[cluster.cluster_group_index];

    debugPrintfEXT("cluster index: %d, cluster group index: %d", cluster_index, cluster.cluster_group_index);

    mat4 MVP = global_uniform.view_proj * model;

    vec4 cluster_color;

#ifdef SHOW_MESHLET_VIEW
    float min_value = 0.1;
    cluster_color = vec4(
        max(float((cluster_index * 37) % 255) / 255.0, min_value),
        max(float((cluster_index * 73) % 255) / 255.0, min_value),
        max(float((cluster_index * 151) % 255) / 255.0, min_value),
        1.0
    );
#elif defined(SHOW_LOD_VIEW)
    float lodFactor = clamp(cluster_group.lod / MAX_LOD, 0.0, 1.0);
    cluster_color = vec4(
        lodFactor,   
        0.0,            
        1.0 - lodFactor, 
        1.0              
    );
#endif
    
    bool flag = false;
    float epsilon = 0.0001;

    uint buffer_index = cluster_group.page_index / MAX_BUFFER_PAGE;
    uint local_page_index = cluster_group.page_index % MAX_BUFFER_PAGE;
    uint page_offset = local_page_index * (PAGE_SIZE / 4) + cluster_group.page_offset;

    _scene_data sdb = scene_data_buffer_addresses[buffer_index];

    uint vertex_offset = sdb.scene_data[page_offset + cluster_group.meshlets_offset + cluster.cluster_index * 4 + 0];
    uint vertex_count = sdb.scene_data[page_offset + cluster_group.meshlets_offset + cluster.cluster_index * 4 + 1];
    uint triangle_offset = sdb.scene_data[page_offset + cluster_group.meshlets_offset + cluster.cluster_index * 4 + 2];
    uint triangle_count = sdb.scene_data[page_offset + cluster_group.meshlets_offset + cluster.cluster_index * 4 + 3];

    SetMeshOutputsEXT(vertex_count, triangle_count);

    uint vertices_offset = page_offset + cluster_group.vertices_offset;
    uint vertex_indices_offset = page_offset + cluster_group.vertex_indices_offset;

    for (uint i = 0; i < vertex_count; ++i)
    {
        uint vertex_index = sdb.scene_data[vertex_indices_offset + vertex_offset + i];

        vec4 pos = vec4(
            uintBitsToFloat(sdb.scene_data[vertices_offset + vertex_index * 8 + 0]),
            uintBitsToFloat(sdb.scene_data[vertices_offset + vertex_index * 8 + 1]),
            uintBitsToFloat(sdb.scene_data[vertices_offset + vertex_index * 8 + 2]),
            1.0
        );

        vec3 normal = vec3(
            uintBitsToFloat(sdb.scene_data[vertices_offset + vertex_index * 8 + 4]),
            uintBitsToFloat(sdb.scene_data[vertices_offset + vertex_index * 8 + 5]),
            uintBitsToFloat(sdb.scene_data[vertices_offset + vertex_index * 8 + 6])
        );

        vec2 uv = vec2(
            uintBitsToFloat(sdb.scene_data[vertices_offset + vertex_index * 8 + 3]),
            uintBitsToFloat(sdb.scene_data[vertices_offset + vertex_index * 8 + 7])
        );

        v_out[i].pos = model * pos;
        gl_MeshVerticesEXT[i].gl_Position = global_uniform.view_proj * v_out[i].pos;

        v_out[i].normal = mat3(model) * normal;

        v_out[i].uv = uv;

        v_out[i].mesh_draw_index = instance.mesh_draw_index;

#if defined(SHOW_LOD_VIEW) || defined(SHOW_MESHLET_VIEW)
        v_out[i].pos = cluster_color;
#endif
    }

    uint triangles_offset = page_offset + cluster_group.triangles_offset;

    for (uint i = 0; i < triangle_count; ++i)
    {
        uint packed_triangle = sdb.scene_data[triangles_offset + triangle_offset + i];
        
        uint idx0 = (packed_triangle >> 0) & 0xFFu;
        uint idx1 = (packed_triangle >> 8) & 0xFFu;
        uint idx2 = (packed_triangle >> 16) & 0xFFu;

        gl_PrimitiveTriangleIndicesEXT[i] = uvec3(idx0, idx1, idx2);
    }
}
