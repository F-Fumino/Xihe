#version 450
layout (local_size_x = 256, local_size_y = 1) in;
layout (binding = 0, rgba16f) uniform readonly image2D inputImage;
layout (binding = 1, rgba16f) uniform writeonly image2D outputImage;
layout(push_constant) uniform PushConstants {
    float innerWeight;
    float outerWeight;
    float innerOffset;
    float outerOffset;
} pc;

// 完全移除shared memory的使用，改为直接采样
// 这样可以避免工作组边界的问题和同步问题
void main() {
    ivec2 sourceSize = imageSize(inputImage);
    ivec2 pos = ivec2(gl_GlobalInvocationID.xy);
    
    if(pos.x >= sourceSize.x || pos.y >= sourceSize.y) {
        return;
    }
    
    vec3 color = vec3(0.0);
    float totalWeight = 0.0;
    
    // 内圈采样
    for(int i = -2; i <= 2; i++) {
        ivec2 samplePos = pos + ivec2(i, 0);
        if(samplePos.x >= 0 && samplePos.x < sourceSize.x) {
            float weight = pc.innerWeight;
            color += imageLoad(inputImage, samplePos).rgb * weight;
            totalWeight += weight;
        }
    }
    
    // 外圈采样
    for(int i = -4; i <= 4; i++) {
        if(abs(i) >= 3) {  // 只采样外圈像素
            ivec2 samplePos = pos + ivec2(i, 0);
            if(samplePos.x >= 0 && samplePos.x < sourceSize.x) {
                float weight = pc.outerWeight;
                color += imageLoad(inputImage, samplePos).rgb * weight;
                totalWeight += weight;
            }
        }
    }
    
    // 归一化
    color = totalWeight > 0.0 ? color / totalWeight : vec3(0.0);
    
    imageStore(outputImage, pos, vec4(color, 1.0));
}