#version 450

layout(local_size_x = 8, local_size_y = 8) in;

layout(set = 0, binding = 0) uniform CommonUniforms {
    uvec2 resolution;           
    vec2 inv_resolution;        
    vec2 inv_input_resolution;  
} common_uniform;

layout(set = 0, binding = 1) uniform sampler2D in_tex;
layout(rgba16f, set = 0, binding = 2) writeonly uniform image2D out_tex;

layout(push_constant) uniform Registers {
    float filter_radius;  // filter size control
} registers;

vec3 sample_13tap(vec2 uv, vec2 delta) {
    // Center sample
    vec3 a = texture(in_tex, uv).rgb;
    
    // Cross samples
    vec3 b = texture(in_tex, uv + vec2(delta.x * 1.0, 0.0)).rgb;
    vec3 c = texture(in_tex, uv - vec2(delta.x * 1.0, 0.0)).rgb;
    vec3 d = texture(in_tex, uv + vec2(0.0, delta.y * 1.0)).rgb;
    vec3 e = texture(in_tex, uv - vec2(0.0, delta.y * 1.0)).rgb;
    
    // Diagonal samples
    vec3 f = texture(in_tex, uv + vec2(delta.x * 0.866, delta.y * 0.866)).rgb;
    vec3 g = texture(in_tex, uv - vec2(delta.x * 0.866, delta.y * 0.866)).rgb;
    vec3 h = texture(in_tex, uv + vec2(delta.x * 0.866, -delta.y * 0.866)).rgb;
    vec3 i = texture(in_tex, uv - vec2(delta.x * 0.866, -delta.y * 0.866)).rgb;
    
    // Extended cross samples
    vec3 j = texture(in_tex, uv + vec2(delta.x * 2.0, 0.0)).rgb;
    vec3 k = texture(in_tex, uv - vec2(delta.x * 2.0, 0.0)).rgb;
    vec3 l = texture(in_tex, uv + vec2(0.0, delta.y * 2.0)).rgb;
    vec3 m = texture(in_tex, uv - vec2(0.0, delta.y * 2.0)).rgb;

    // Weighted average
    vec3 result = a * 0.20; // center
    result += (b + c + d + e) * 0.125; // close samples
    result += (f + g + h + i) * 0.075; // diagonal samples
    result += (j + k + l + m) * 0.025; // far samples
    
    return result;
}

void main() {
    if (any(greaterThanEqual(gl_GlobalInvocationID.xy, common_uniform.resolution))) {
        return;
    }

    vec2 uv = (vec2(gl_GlobalInvocationID.xy) + 0.5) * common_uniform.inv_resolution;
    vec2 delta = registers.filter_radius * common_uniform.inv_input_resolution;
    
    vec3 color = sample_13tap(uv, delta);
    
    imageStore(out_tex, ivec2(gl_GlobalInvocationID.xy), vec4(color, 1.0));
}