#version 450
layout(local_size_x = 8, local_size_y = 8) in;
layout(set = 0, binding = 0) uniform sampler2D in_tex;
layout(rgba16f, set = 0, binding = 1) writeonly uniform image2D out_tex;

layout(set = 0, binding = 2) uniform CommonUniforms {
    uvec2 resolution;           
    vec2 inv_resolution;        
    vec2 inv_input_resolution;  
} common_uniform;

layout(push_constant) uniform Registers {
    float threshold;           
    float soft_threshold;      
    float intensity;          
    float saturation;         
} registers;

float get_luminance(vec3 color) {
    return dot(color, vec3(0.2126729, 0.7151522, 0.0721750));
}

vec3 adjust_saturation(vec3 color, float adjustment) {
    float luminance = get_luminance(color);
    return mix(vec3(luminance), color, adjustment);
}

vec3 sample_with_sharpness(sampler2D tex, vec2 uv, vec2 texelSize) {
    vec3 center = textureLod(tex, uv, 0.0).rgb * 0.5;
    
    vec3 surrounding = textureLod(tex, uv + vec2(texelSize.x, 0.0), 0.0).rgb * 0.125
                    + textureLod(tex, uv + vec2(-texelSize.x, 0.0), 0.0).rgb * 0.125
                    + textureLod(tex, uv + vec2(0.0, texelSize.y), 0.0).rgb * 0.125
                    + textureLod(tex, uv + vec2(0.0, -texelSize.y), 0.0).rgb * 0.125;
    
    return center + surrounding;
}

void main() {
    if (any(greaterThanEqual(gl_GlobalInvocationID.xy, common_uniform.resolution))) {
        return;
    }
    
    vec2 uv = (vec2(gl_GlobalInvocationID.xy) + 0.5) * common_uniform.inv_resolution;
    vec2 texelSize = common_uniform.inv_input_resolution;
    
    vec3 color = sample_with_sharpness(in_tex, uv, texelSize);
    
    float luminance = get_luminance(color);
    float knee = registers.threshold + registers.soft_threshold;
    float soft = smoothstep(registers.threshold, knee, luminance);
    
    vec3 bright_color = color * soft;
    
    bright_color = adjust_saturation(bright_color, registers.saturation);
    
    bright_color *= registers.intensity;
    
    imageStore(out_tex, ivec2(gl_GlobalInvocationID.xy), vec4(bright_color, 1.0));
}