#version 450
layout(local_size_x = 8, local_size_y = 8) in;
layout(set = 0, binding = 0) uniform sampler2D in_tex;
layout(rgba16f, set = 0, binding = 1) writeonly uniform image2D out_tex;
layout(set = 0, binding = 2) uniform CommonUniforms {
    uvec2 resolution;           
    vec2 inv_resolution;        
    vec2 inv_input_resolution;  
} common_uniform;
layout(push_constant) uniform Registers {
    float threshold;           
    float soft_threshold;      
    float intensity;          
    float saturation;         
} registers;

float get_luminance(vec3 color) {
    return dot(color, vec3(0.2126729, 0.7151522, 0.0721750));
}

void main() {
    if (any(greaterThanEqual(gl_GlobalInvocationID.xy, common_uniform.resolution))) {
        return;
    }
    
    vec2 uv = (vec2(gl_GlobalInvocationID.xy) + 0.5) * common_uniform.inv_resolution;
    vec3 rgb = textureLod(in_tex, uv, 0.0).rgb;
    
    float luma = get_luminance(rgb);
    
    float soft_mask = smoothstep(registers.threshold, registers.threshold + registers.soft_threshold, luma);
    
    rgb = rgb * soft_mask;
    
    float rgb_luma = get_luminance(rgb);
    vec3 rgb_saturated = mix(vec3(rgb_luma), rgb, registers.saturation);
    rgb = registers.intensity * rgb_saturated;
    
    imageStore(out_tex, ivec2(gl_GlobalInvocationID.xy), vec4(rgb, 1.0));
}